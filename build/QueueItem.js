(function() {
  var QueueItem;

  QueueItem = void 0;

  module.exports = function(connection, crawler) {
    var schema;
    schema = new connection.base.Schema({
      protocol: {
        type: String,
        required: true,
        index: true
      },
      host: {
        type: String,
        required: true,
        index: true
      },
      port: {
        type: Number,
        index: true
      },
      path: {
        type: String,
        required: true,
        index: true
      },
      status: {
        type: String,
        "default": 'queued',
        index: true,
        "enum": ['queued', 'spooled', 'fetched', 'redirected', 'error']
      },
      fetched: {
        type: Boolean,
        "default": false
      },
      stateData: {
        type: Object,
        "default": {}
      },
      crawler: {
        type: String,
        index: true,
        "default": 'default'
      }
    });
    schema.index({
      crawler: 1,
      status: 1
    });
    schema.virtual('url').get(function() {
      return this.protocol + '://' + this.host + (this.port ? ':' + this.port : void 0) + this.path;
    });
    if (QueueItem == null) {
      QueueItem = connection.model("QueueItem", schema);
    }
    return module.exports = QueueItem;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlF1ZXVlSXRlbS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLFNBQUEsR0FBWTs7RUFFWixNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLFVBQUQsRUFBYSxPQUFiO0FBQ2YsUUFBQTtJQUFBLE1BQUEsR0FBYSxJQUFBLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBaEIsQ0FDWDtNQUFBLFFBQUEsRUFDRTtRQUFBLElBQUEsRUFBVSxNQUFWO1FBQ0EsUUFBQSxFQUFVLElBRFY7UUFFQSxLQUFBLEVBQVUsSUFGVjtPQURGO01BS0EsSUFBQSxFQUNFO1FBQUEsSUFBQSxFQUFVLE1BQVY7UUFDQSxRQUFBLEVBQVUsSUFEVjtRQUVBLEtBQUEsRUFBVSxJQUZWO09BTkY7TUFVQSxJQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQVUsTUFBVjtRQUNBLEtBQUEsRUFBVSxJQURWO09BWEY7TUFjQSxJQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQVUsTUFBVjtRQUNBLFFBQUEsRUFBVSxJQURWO1FBRUEsS0FBQSxFQUFVLElBRlY7T0FmRjtNQW1CQSxNQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQVUsTUFBVjtRQUNBLFNBQUEsRUFBVSxRQURWO1FBRUEsS0FBQSxFQUFVLElBRlY7UUFHQSxNQUFBLEVBQVUsQ0FDUixRQURRLEVBRVIsU0FGUSxFQUdSLFNBSFEsRUFJUixZQUpRLEVBS1IsT0FMUSxDQUhWO09BcEJGO01BK0JBLE9BQUEsRUFFRTtRQUFBLElBQUEsRUFBVSxPQUFWO1FBQ0EsU0FBQSxFQUFVLEtBRFY7T0FqQ0Y7TUFvQ0EsU0FBQSxFQUVFO1FBQUEsSUFBQSxFQUFVLE1BQVY7UUFDQSxTQUFBLEVBQVUsRUFEVjtPQXRDRjtNQXlDQSxPQUFBLEVBS0U7UUFBQSxJQUFBLEVBQVUsTUFBVjtRQUNBLEtBQUEsRUFBVSxJQURWO1FBRUEsU0FBQSxFQUFVLFNBRlY7T0E5Q0Y7S0FEVztJQXFEYixNQUFNLENBQUMsS0FBUCxDQUNFO01BQUEsT0FBQSxFQUFTLENBQVQ7TUFDQSxNQUFBLEVBQVMsQ0FEVDtLQURGO0lBSUEsTUFBTSxDQUFDLE9BQVAsQ0FBZSxLQUFmLENBQ0UsQ0FBQyxHQURILENBQ08sU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFELEdBQVksS0FBWixHQUFvQixJQUFDLENBQUEsSUFBckIsR0FBNEIsQ0FBSSxJQUFDLENBQUEsSUFBSixHQUFjLEdBQUEsR0FBTSxJQUFDLENBQUEsSUFBckIsR0FBQSxNQUFELENBQTVCLEdBQTBELElBQUMsQ0FBQTtJQUE5RCxDQURQOztNQUdBLFlBQWEsVUFBVSxDQUFDLEtBQVgsQ0FBaUIsV0FBakIsRUFBOEIsTUFBOUI7O1dBQ2IsTUFBTSxDQUFDLE9BQVAsR0FBaUI7RUE5REY7QUFGakIiLCJmaWxlIjoiUXVldWVJdGVtLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiUXVldWVJdGVtID0gdW5kZWZpbmVkXG5cbm1vZHVsZS5leHBvcnRzID0gKGNvbm5lY3Rpb24sIGNyYXdsZXIpIC0+XG4gIHNjaGVtYSA9IG5ldyBjb25uZWN0aW9uLmJhc2UuU2NoZW1hXG4gICAgcHJvdG9jb2w6XG4gICAgICB0eXBlICAgIDogU3RyaW5nXG4gICAgICByZXF1aXJlZDogeWVzXG4gICAgICBpbmRleCAgIDogeWVzXG5cbiAgICBob3N0ICAgIDpcbiAgICAgIHR5cGUgICAgOiBTdHJpbmdcbiAgICAgIHJlcXVpcmVkOiB5ZXNcbiAgICAgIGluZGV4ICAgOiB5ZXNcblxuICAgIHBvcnQgICAgOlxuICAgICAgdHlwZSAgICA6IE51bWJlclxuICAgICAgaW5kZXggICA6IHllc1xuXG4gICAgcGF0aCAgICA6XG4gICAgICB0eXBlICAgIDogU3RyaW5nXG4gICAgICByZXF1aXJlZDogeWVzXG4gICAgICBpbmRleCAgIDogeWVzXG5cbiAgICBzdGF0dXMgIDpcbiAgICAgIHR5cGUgICAgOiBTdHJpbmdcbiAgICAgIGRlZmF1bHQgOiAncXVldWVkJ1xuICAgICAgaW5kZXggICA6IHllc1xuICAgICAgZW51bSAgICA6IFtcbiAgICAgICAgJ3F1ZXVlZCcgICAgICAjIEFkZGVkIHRvIHF1ZXVlXG4gICAgICAgICdzcG9vbGVkJyAgICAgIyBSZXF1ZXN0ZWQsIGJ1dCBubyByZXNwb25zZSB5ZXRcbiAgICAgICAgJ2ZldGNoZWQnICAgICAjIE5vcm1hbCByZXNwb25zZSAoT0spIHJlY2VpdmVkLiBUaGlzIGl0ZW0gaXMgZG9uZS5cbiAgICAgICAgJ3JlZGlyZWN0ZWQnICAjIDMweCBSZWRpcmVjdCByZWNlaXZlZC4gVGFyZ2V0IHNob3VsZCBwcm9iYWJpbHkgYmUgYWRkZWQgdG8gcXVldWUsIGJ1dCBpdCdzIHVwIHRvIGFwcGxpY2F0aW9uIGxvZ2ljIHRvIGhhbmRsZSB0aGlzLlxuICAgICAgICAnZXJyb3InICAgICAgICMgU29tZSBraW5kIG9mIGVycm9yLiBEZXRhaWxzIHNob3VsZCBnbyB0byBzdGF0ZURhdGFcbiAgICAgIF1cblxuICAgIGZldGNoZWQgOlxuICAgICAgIyBUT0RPOiBJc24ndCBpdCByZWR1bmRhbnQ/IFdlIGhhdmUgc3RhdHVzIGZpZWxkIGZvciB0aGF0LlxuICAgICAgdHlwZSAgICA6IEJvb2xlYW5cbiAgICAgIGRlZmF1bHQgOiBub1xuXG4gICAgc3RhdGVEYXRhOlxuICAgICAgIyBPdGhlciBwcm9wZXJ0aWVzIG9mIEl0ZW0gKGxpa2Ugc3RhdHMsIGVycm9yIGRlc2NyaXB0aW9uKVxuICAgICAgdHlwZSAgICA6IE9iamVjdFxuICAgICAgZGVmYXVsdCA6IHt9XG5cbiAgICBjcmF3bGVyIDpcbiAgICAgICMgSWRlbnRpZmllcyBjcmF3bGVyLCBmb3Igd2hpY2ggdGhpcyBxdWV1ZSBpcyBoZWxkXG4gICAgICAjIFRPRE86IEl0IHdvdWxkIGJlIG5pY2UgdG8gdXNlIGRpc2NyaW1pbmF0b3JzIGluc3RlYWQuXG4gICAgICAjIEl0IHRocm93cyBEaXNjcmltaW5hdG9yIFwiI3tuYW1lfVwiIGNhbiBvbmx5IGJlIGEgZGlzY3JpbWluYXRvciBvZiB0aGUgcm9vdCBtb2RlbFxuICAgICAgIyBXVEY/XG4gICAgICB0eXBlICAgIDogU3RyaW5nXG4gICAgICBpbmRleCAgIDogeWVzXG4gICAgICBkZWZhdWx0IDogJ2RlZmF1bHQnXG5cbiAgIyBDb21wb3VuZCBpbmRleCBmb3IgZmluZEFuZE1vZGlmeSBxdWVyeSBydW4gaW4gTW9uZ29RdWV1ZSNvbGRlc3RVbmZldGNoZWRJdGVtXG4gICMgV2l0aG91dCBpdCBtb25nb2QgcHJvZHVjZXMgZ2lnYWJ5dGVzIG9mIGxvZ3Mgd2l0aCB3YXJuaW5nc1xuICBzY2hlbWEuaW5kZXhcbiAgICBjcmF3bGVyOiAxXG4gICAgc3RhdHVzIDogMVxuXG4gIHNjaGVtYS52aXJ0dWFsICd1cmwnXG4gICAgLmdldCAtPiBAcHJvdG9jb2wgKyAnOi8vJyArIEBob3N0ICsgKGlmIEBwb3J0IHRoZW4gJzonICsgQHBvcnQpICsgQHBhdGhcblxuICBRdWV1ZUl0ZW0gPz0gY29ubmVjdGlvbi5tb2RlbCBcIlF1ZXVlSXRlbVwiLCBzY2hlbWFcbiAgbW9kdWxlLmV4cG9ydHMgPSBRdWV1ZUl0ZW1cbiJdfQ==
